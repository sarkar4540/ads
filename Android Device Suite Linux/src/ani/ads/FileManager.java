/*
 * Copyright 2016 Aniruddha Sarkar.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ani.ads;

import javax.swing.ListModel;
import ani.ads.MainFrame.FType;
import java.awt.event.MouseEvent;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
/**
 *
 * @author ani
 */
public class FileManager extends javax.swing.JPanel {

    /**
     * Creates new form FileManager
     */
    public FileManager() {
        initComponents();
        folder=new ImageIcon(getClass().getResource("/ani/ads/folder.png"));
        file=new ImageIcon(getClass().getResource("/ani/ads/file.png"));
    }
    Icon folder,file;
    
    void setModel(ListModel m){
        lm=m;
        selected=-1;
        this.removeAll();
        for(int i=0;i<m.getSize();i++){
            
            FType f=(FType)m.getElementAt(i);
            MLabel b=new MLabel(i,f,this);
            b.setIcon((f.fo().equals("4")||f.fo().equals("0"))?folder:file);
            
            this.add(b,i);
            
        }
        refresh();
    }
    ListModel lm;
    
    Object getSelectedValue(){
        return lm.getElementAt(selected);
    }
    int getSelectedIndex(){
        return selected;
    }
    boolean isSelectionEmpty(){
        return selected==-1;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText("jLabel1");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.blue, null, null));
        add(jLabel1);

        jLabel2.setText("jLabel2");
        add(jLabel2);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(null, evt);
    }//GEN-LAST:event_formMouseDragged
    void refresh(){
        for(int i=0;i<this.getComponentCount();i++){
            MLabel m=(MLabel)this.getComponent(i);
            m.check(selected);
        }
    }
    /*public void setEnabled(boolean f){
        for(int i=0;i<this.getComponentCount();i++){
            JLabel m=(JLabel)this.getComponent(i);
            m.setEnabled(f);
        }
    }*/
    void clicked(MouseEvent e){
        processMouseEvent(e);
    }
    int selected;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
class MLabel extends JLabel{
    FType ft;
    MLabel(int i,FType f,FileManager fm){
        super(f.to());
        index=i;
        ft=f;
        addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fm.selected=index;
                fm.refresh();
                fm.clicked(new MouseEvent(evt.getComponent(),evt.getID(),System.currentTimeMillis(),evt.getModifiers(),getX()+evt.getX(),getY()+evt.getY(),evt.getClickCount(),evt.isPopupTrigger(),evt.getButton()));
            }
        });
    }
    void check(int i){
        if(index==i){
            setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.BLUE, null, null));
        
        }else{
            setBorder(null);
            
        }
    }
    int index;
    Object getFType(){
        return ft;
    }
}
